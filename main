/******************************************************************
Universidad del Valle de Guatemala
IE2023 Programación de Microcontroladores
Autor: Fernando Donis
Compilador: PIC-AS (v2.36), MPLAB X IDE (v6.00)
Proyecto: Laboratorio 4
Hardware: PIC16F887
Creado: 24/08/2022
Última Modificación: 17/09/2022
******************************************************************/

// CONFIG1
#pragma config FOSC = INTRC_NOCLKOUT// Oscillator Selection bits (INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF      // RE3/MCLR pin function select bit (RE3/MCLR pin function is digital input, MCLR internally tied to VDD)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = OFF      // Brown Out Reset Selection bits (BOR disabled)
#pragma config IESO = OFF       // Internal External Switchover bit (Internal/External Switchover mode is disabled)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is disabled)
#pragma config LVP = OFF        // Low Voltage Programming Enable bit (RB3 pin has digital I/O, HV on MCLR must be used for programming)

// CONFIG2
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#include <xc.h>
#include <pic16f887.h>
#define _XTAL_FREQ 4000000
/**************************************************
 Variables
 ***************************************************/
unsigned char a;
uint8_t displayAC[16] = {0b00111111,0b00000110,0b01011011,0b01001111,0b01100110,0b01101101,0b01111101,0b00000111,0b01111111,0b01101111,0b01110111,0b01111100,0b00111001,0b01011110,0b01111001,0b01110001};
uint8_t d1, d2, ADC;
/**************************************************
 Prototipos de funciones
 ***************************************************/
void setup (void);
void setupADC (void);
void dis(int va);
/**************************************************
 Código Principal
 ***************************************************/

void main(void) {
    setup();
    setupADC();
    //Loop Principal
    while(1){
    /**************************************************
     Displays Potenciómetro
    ***************************************************/    
        ADCON0bits.GO = 1;
        while(ADCON0bits.GO == 1){;}
        ADIF = 0;
        ADC = ADRESH;
        dis(ADC);
        
        RC3 = 0;
        RC4 = 1;
        PORTD = displayAC[d2];
        __delay_ms(10);
    
        RC3 = 1;
        RC4 = 0;
        PORTD = displayAC[d1];
        __delay_ms(10);
    /**************************************************
     Contador
    ***************************************************/    
        if(PORTCbits.RC0==1){
            __delay_ms(50);
            a++;
        }else{
            a = a;
        }
        if(PORTCbits.RC1==1){
            __delay_ms(50);
            a--;
        }else{
            a = a;
        }
        __delay_ms(50);
        PORTB=a;
    /**************************************************
     Alarma
    ***************************************************/            
        if (ADRESH >= PORTB){
            RA2 = 1;
        }else{
            RA2 = 0;
        }
    }
    return;
}
/**************************************************
 Valores multiplexado
 ***************************************************/
void dis(int va){
    d1 = (uint8_t)(va/16);
    d2 = (uint8_t)(va%16);        
}
/**************************************************
 Funcion para configurar GPIOs
 ***************************************************/
void setup (void) {
    ANSELH = 0;
    
    TRISB = 0;
    PORTB = 0;
    
    TRISD = 0;
    PORTD = 0;
    
    TRISAbits.TRISA2 = 0;
    PORTAbits.RA2 = 0;
    
    
    TRISCbits.TRISC0=1;
    TRISCbits.TRISC1=1;
    TRISCbits.TRISC3=0;
    TRISCbits.TRISC4=0;
    OSCCONbits.IRCF = 0b110;
    OSCCONbits.SCS = 1;
    __delay_us(100);
}
/**************************************************
 Funcion para configurar ADC
 ***************************************************/
void setupADC(void){
    TRISA = TRISA | 0x01;
    ANSEL = ANSEL | 0x01;
    ADCON0bits.ADCS1 = 0;
    ADCON0bits.ADCS0 = 1;
    
    ADCON1bits.VCFG1 = 0;
    ADCON1bits.VCFG0 = 0;
    
    ADCON1bits.ADFM = 0;
    
    ADCON0bits.CHS3 = 0;
    ADCON0bits.CHS2 = 0;
    ADCON0bits.CHS1 = 0;
    ADCON0bits.CHS0 = 0;
    
    ADCON0bits.ADON = 1;
    __delay_us(100);
}